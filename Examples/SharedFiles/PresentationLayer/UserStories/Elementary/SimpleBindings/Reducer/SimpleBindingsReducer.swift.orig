//
//  SimpleBindingsReducer.swift
//  verse-examples
//
//  Created by Nikita Lezya on 17/10/2021.
//  Copyright Â© 2021 Incetro Inc. All rights reserved.
//

import TCA

// MARK: - Reducer

/// A `SimpleBindings` module reducer
///
/// It's a function that describes how to evolve the current `SimpleBindingsState` to the next state given an action.
/// The `SimpleBindingsReducer` is also responsible for returning any effects that should be run, such as API requests,
/// which can be done by returning an `Effect` value
///
/// - Note: The thread on which effects output is important. An effect's output is immediately sent
///   back into the store, and `Store` is not thread safe. This means all effects must receive
///   values on the same thread, **and** if the `Store` is being used to drive UI then all output
///   must be on the main thread. You can use the `Publisher` method `receive(on:)` for make the
///   effect output its values on the thread of your choice.
public let simpleBindingsReducer = SimpleBindingsReducer.combine(
    counterReducer.pullback(
        state: \.counterState,
        action: /SimpleBindingsAction.counter,
        environment: .init()
    ),
    .init { state, action, environment in
        switch action {
        case .changeText(let text):
            state.text = text
        case .switchToggle(let enabled):
            state.toggleEnabled = enabled
            break
        case .moveSlider(let value):
            state.sliderValue = Double(Int(value))
        case .resetControls:
<<<<<<< HEAD
            state = SimpleBindingsState()
=======
            state = .init()
>>>>>>> 9891425f3f2a3917d156a579a54b499f3e54380a
        case .counter(.decrementButtonTapped):
            state.sliderValue = Double(min(state.counterState.count, Int(state.sliderValue)))
        case .pickValue(let value):
            state.pickedColor = value
        default:
            break
        }
        return .none
    }
)
